#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцентОтРабот = ПроцентОтРаботСпециалиста();
	Если ПроцентОтРабот = Неопределено Тогда
		
		ТекстСообщения = СтрШаблон("Не установлен ПроценОтРабот у специалиста %1 за %2 в регистре УсловияОплатыСотрудников", Специалист, Формат(Дата, "ДФ=ММММ"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	Иначе
	
		АбоненскаяПлата = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание;
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВидДоговора, 
																				|ВКМ_ДатаНачалаДействияДоговора, 
																				|ВКМ_ДатаОкончанияДействияДоговора, 
																				|ВКМ_СтоимостьЧасаРаботы");
		 
		Если РеквизитыДоговора.ВидДоговора <> АбоненскаяПлата 
						И Дата > РеквизитыДоговора.ВКМ_ДатаНачалаДействияДоговора
						И Дата < РеквизитыДоговора.ВКМ_ДатаОкончанияДействияДоговора Тогда
		
			Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
						
			Для Каждого Строка из ВыполненныеРаботы Цикл
				
				//регистр ВКМ_ВыполненныеКлиентуРаботы
				Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
				Движение.Период = Дата;
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Клиент = Клиент;
				Движение.Договор = Договор;
				Движение.КоличествоЧасов = Строка.ФактическиПотраченоЧасов;
				Движение.СуммаКОплате = Строка.ЧасыКОплатеКлиенту * РеквизитыДоговора.ВКМ_СтоимостьЧасаРаботы;
				Движение.НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
				
			КонецЦикла;
			
		Иначе 
			
			ОбщегоНазначения.СообщитьПользователю("Данные в регистр ВКМ_ВыполненныеКлиентуРаботы не могут быть записаны!");
			
		КонецЕсли;
		
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
		
		Для Каждого Строка из ВыполненныеРаботы Цикл
			
			//регистр ВКМ_ВыполненныеСотрудникомРаботы 
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Сотрудник = Специалист;
			Движение.ЧасовКОплате = Строка.ЧасыКОплатеКлиенту;
			Движение.СуммаКОплате = Строка.ЧасыКОплатеКлиенту * РеквизитыДоговора.ВКМ_СтоимостьЧасаРаботы * (ПроцентОтРабот / 100);
		
		КонецЦикла;
	
	КонецЕсли;

	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоНовый() Тогда
		
		ТекстСообщения = "Создан новый документ ОбслуживаниеКлиентов";
		Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьУведомлениеБоту(ТекстСообщения);
		
	Иначе
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДатаПроведенияРабот, Специалист");
		
		Если ДатаПроведенияРабот <> ДанныеДокумента.ДатаПроведенияРабот Тогда
			
			ТекстСообщения = СтрШаблон("Дата проведения работ изменены по документу %1 на %2", Ссылка, ДатаПроведенияРабот);
			Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьУведомлениеБоту(ТекстСообщения);
			
		КонецЕсли;
			
		Если Специалист <> ДанныеДокумента.Специалист Тогда
			
			ТекстСообщения = СтрШаблон("Изменен специалист по документу %1 на %2", Ссылка, Специалист);
			Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьУведомлениеБоту(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроцентОтРаботСпециалиста()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ПроцентОтРабот;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
#КонецОбласти

#КонецЕсли



